# -*- coding: utf-8 -*-
"""Untitled31.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XeZDVO8o2s0uYCUt1cK4vjO47ptSdV9R
"""

import streamlit as st
import google.generativeai as genai
from youtube_transcript_api import YouTubeTranscriptApi, TranscriptsDisabled, NoTranscriptFound
import re # Import the re module for regular expressions

# Configure the Google Generative AI library with your API key
# It's recommended to use Streamlit Secrets for API keys in deployed apps
# Go to your Streamlit app's dashboard -> Secrets and add GEMINI_API_KEY = "your_api_key_here"
# Or, for local testing, create a .streamlit folder in your app's root directory
# and inside it, create a secrets.toml file with:
# GEMINI_API_KEY = "your_api_key_here"
try:
    genai.configure(api_key=st.secrets["GEMINI_API_KEY"])
except AttributeError:
    st.error("Gemini API Key not found in Streamlit Secrets. Please add it to your app's secrets.")
    st.stop()


# Define the prompt for the YouTube video summarizer
prompt = """You are a YouTube video summarizer. You will be taking the transcript text
and summarizing the entire video and providing the important summary in points
within 250 words. Please provide the summary of the text given here: """

## Function to get the transcript data from YouTube videos
@st.cache_data # Cache the transcript to avoid re-fetching on rerun
def extract_transcript_details(youtube_video_url):
    """
    Extracts the transcript from a given YouTube video URL.

    Args:
        youtube_video_url (str): The URL of the YouTube video.

    Returns:
        str: The concatenated transcript text.
    """
    try:
        # Regex to extract video ID from various YouTube URL formats
        video_id_match = re.search(r'(?:v=|youtu\.be\/|http:\/\/googleusercontent\.com\/youtube\.com\/\d+)([a-zA-Z0-9_-]{11})', youtube_video_url)
        if not video_id_match:
            raise ValueError("Invalid YouTube URL format provided. Please use a valid YouTube link.")
        video_id = video_id_match.group(1)

        # Fetch the transcript using YouTubeTranscriptApi
        transcript_list = YouTubeTranscriptApi.get_transcript(video_id)

        # Concatenate all transcript parts into a single string
        transcript = " ".join([i["text"] for i in transcript_list])
        return transcript

    except TranscriptsDisabled:
        raise Exception("Transcripts are disabled for this video.")
    except NoTranscriptFound:
        raise Exception("No English transcript found for this video.")
    except Exception as e:
        # Catch other potential errors from YouTubeTranscriptApi
        raise Exception(f"Failed to fetch transcript: {e}")

## Function to generate the summary based on Prompt from Google Gemini Pro
def generate_gemini_content(transcript_text: str, prompt_text: str) -> str:
    """
    Generates a summary of the given transcript text using the Google Gemini Pro model.

    Args:
        transcript_text (str): The video transcript to summarize.
        prompt_text (str): The prompt to guide the summarization.

    Returns:
        str: The generated summary.
    """
    model = genai.GenerativeModel("gemini-2.0-flash")
    try:
        response = model.generate_content(prompt_text + transcript_text)
        return response.text
    except Exception as e:
        raise Exception(f"Gemini API call failed: {e}")

# --- Streamlit UI ---
st.set_page_config(page_title="YouTube Video Summarizer", layout="centered")

st.markdown("<h1 style='text-align: center;'>ðŸ“¹ YouTube Video Summarizer</h1>", unsafe_allow_html=True)
st.markdown("Enter a YouTube video link below to get a detailed summary of its transcript.")
st.markdown("---")

youtube_link = st.text_input("YouTube Video Link:", help="E.g., https://www.youtube.com/watch?v=dQw4w9WgXcQ or youtu.be/1234567890")

if st.button("Get Summary"):
    if not youtube_link:
        st.warning("Please enter a YouTube video link.")
    else:
        with st.spinner("Fetching transcript and generating summary... This may take a moment."):
            try:
                transcript_text = extract_transcript_details(youtube_link)
                st.success(f"Transcript fetched successfully. Length: {len(transcript_text)} characters.")

                summary = generate_gemini_content(transcript_text, prompt)
                st.markdown("---")
                st.subheader("Detailed Notes:")
                st.markdown(summary)

            except Exception as e:
                st.error(f"Error: Could not process video or generate summary. {e}")
                if "No English transcript found" in str(e):
                    st.info("This video might not have English transcripts available.")
                elif "Transcripts are disabled" in str(e):
                    st.info("Transcripts are disabled for this video by the uploader.")
                elif "Invalid YouTube URL" in str(e):
                    st.warning("Please ensure the YouTube URL is valid and correctly formatted.")
                elif "403" in str(e) or "429" in str(e):
                    st.error("API rate limit exceeded or access denied. Please check your API key or try again later.")
                elif "400" in str(e) and "Gemini API call failed" in str(e):
                    st.error("Bad request to Gemini API. The video transcript might be too long for the model, or there's an issue with the prompt.")
                else:
                    st.error("An unexpected error occurred. Please check the video link and your internet connection.")

st.markdown("---")
st.caption("Powered by Google Gemini and YouTube Transcript API")